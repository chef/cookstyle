AllCops:
  DisabledByDefault: true
  TargetRubyVersion: 2.4
  Exclude:
    - vendor/**/*
    - Guardfile

AlignParameters:
  Enabled: false
Documentation:
  Enabled: false
Encoding:
  Enabled: false
Naming/FileName:
  Enabled: false
Style/Alias:
  Enabled: false
Layout/SpaceBeforeFirstArg:
  Enabled: false
Style/ClassAndModuleChildren:
  Enabled: false
Style/DoubleNegation:
  Enabled: false

# disable all the length cops as they're not appropriate for cookbooks
LineLength:
  Enabled: false
MethodLength:
  Enabled: false
BlockLength:
  Enabled: false
Metrics/AbcSize:
  Enabled: false
Metrics/ModuleLength:
  Enabled: false
Metrics/ClassLength:
  Enabled: false
Metrics/CyclomaticComplexity:
  Enabled: false
PerceivedComplexity:
  Enabled: false

# https://github.com/chef/cookstyle/pull/5
Style/TrailingCommaInHashLiteral:
  Enabled: true
  EnforcedStyleForMultiline: comma

# https://github.com/chef/cookstyle/pull/5
Style/TrailingCommaInArrayLiteral:
  Enabled: true
  EnforcedStyleForMultiline: comma

# Underscores in numbers are unnecessary, especially for port numbers where they are unexpected
Style/NumericLiterals:
  Enabled: false

# This often triggers no matter what you do with inspec/serverspec matchers
Lint/AmbiguousRegexpLiteral:
  Enabled: false

# some names are not ascii and this prevents copyright comments
Style/AsciiComments:
  Enabled: false

# avoid case statements where the 2nd 'when' would never fire
Lint/DuplicateCaseCondition:
  Enabled: true

# empty expressions serve no purpose
Lint/EmptyExpression:
  Enabled: true

# when in a case statement should always do something
Lint/EmptyWhen:
  Enabled: true

# %w('something') is almost always a typo
Lint/PercentStringArray:
  Enabled: true

# %w(:something) should be a string not a symbol
Lint/PercentSymbolArray:
  Enabled: true

# if you rescue Exception, then rescue say StandardError you're gonna have a bad time
Lint/ShadowedException:
  Enabled: true

# We're on modern ruby so let's assume Integer everywhere
Lint/UnifiedInteger:
  Enabled: true

# consistent hash key/value checks
Style/PreferredHashMethods:
  Enabled: true

# when iterating a fixed number of times this is much easier to read
Style/EachForSimpleLoop:
  Enabled: true

# a case statement without a condition is just an if statement
Style/EmptyCaseCondition:
  Enabled: true

# == 0 is more performant than .zero? and .zero? also introduced several regressions
Style/NumericPredicate:
  Enabled: true
  EnforcedStyle: comparison

# this is bad %w(something     another_thing   one_more)
Layout/SpaceInsideArrayPercentLiteral:
  Enabled: true

# disable this until there's an autocorrect (0.47 has one)
Bundler/OrderedGems:
  Enabled: false

# There's no reason to have a gem listed twice
Bundler/DuplicatedGem:
  Enabled: true

# This results in very confusing code to read with little perf benefit
Performance/Casecmp:
  Enabled: false

# This comes with changing the ruby target to 2.3+
Style/FrozenStringLiteralComment:
  Enabled: false

# maintain the previous array behavior in previous cookstyle releases
Style/PercentLiteralDelimiters:
   PreferredDelimiters:
    '%':  ()
    '%i': ()
    '%I': ()
    '%q': ()
    '%Q': ()
    '%r': '{}'
    '%s': ()
    '%w': ()
    '%W': ()
    '%x': ()

# backwards conditions are hard to read
Style/YodaCondition:
  Enabled: true

Layout/EmptyLinesAroundExceptionHandlingKeywords:
  Enabled: true

# enforce lf to avoid failures on Windows systems
Layout/EndOfLine:
  Enabled: true
  EnforcedStyle: lf

# guardclause sacrifices ease of readability for consistency at times
Style/GuardClause:
  Enabled: false

# Users really shouldn't have a gem, but if they do they should do it securely
Bundler/InsecureProtocolSource:
  Enabled: true

# It's easier to read a simple .each and they're faster
Lint/RedundantWithIndex:
  Enabled: true

# Catches when a user single quotes a string with interpolation
Lint/InterpolationCheck:
  Enabled: true

# Bad: `bar = [foo.min, foo.max]`. Good: bar = foo.minmax
Style/MinMax:
  Enabled: true

# Avoid ruby deprecation warnings
Lint/UriRegexp:
  Enabled: true

Performance/UriDefaultParser:
  Enabled: true

# :true or :false seems like a horrible idea
Lint/BooleanSymbol:
  Enabled: true

# this avoids very verbose code for no reason
Style/RedundantConditional:
  Enabled: true

# catches people writing a regex check wrong
Lint/RegexpInCondition:
  Enabled: true

# Avoids pointless / complex code
Lint/RedundantWithObject:
  Enabled: true

# avoid requiring things that come for free
Lint/UnneededRequireStatement:
  Enabled: true

# Avoid poorly formatted methods
Style/TrailingBodyOnMethodDefinition:
  Enabled: true

# Avoid weird empty lines in an argument
Layout/EmptyLinesAroundArguments:
  Enabled: true

# don't shadow arguments
Lint/ShadowedArgument:
  Enabled: true

# find orphaned empty comments
Layout/EmptyComment:
  Enabled: true

# warn on deprecated functionality
Lint/BigDecimalNew:
  Enabled: true

# remove bogus rubocop comments. We already enabled Disable directives
Lint/UnneededCopEnableDirective:
  Enabled: true

# get people on a much simpler ruby 2.4 way of doing things
Style/UnpackFirst:
  Enabled: true

# simplify how you get the min or max of an array
Performance/UnneededSort:
  Enable: true

Style/SymbolProc:
  # A list of method names to be ignored by the check.
  # The names should be fairly unique, otherwise you'll end up ignoring lots of code.
  IgnoredMethods:
    - lazy
